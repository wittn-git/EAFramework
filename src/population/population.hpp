#pragma once

#include <vector>
#include <functional>
#include <ctime>
#include <cstdlib>
#include <algorithm>
#include <string>
#include <random>
#include <set>
#include <cctype>
#include <random>

using u32 = uint_least32_t; 

// Class Outline ----------------------------------------------------------------------------------------------------------------------------

template<typename T>
class Population{

protected:

    int size;
    std::vector<T> genes;
    std::mt19937 generator;

    const std::function<T(const T&, std::mt19937& generator)>& mutate;
    const std::function<T(const T&, const T&, std::mt19937&)>& recombine;
    const std::function<T(const std::vector<double>&, const std::vector<T>&, std::mt19937&)>& chooseParent;
    const std::function<T(const std::vector<T>&, const std::vector<T>&)>& select;

public:

    Population();

    // Constructor for population initialized with passed genes initial_genes
    Population(
        const std::vector<T>& initial_genes,
        u32 seed,
        const std::function<T(const T&, std::mt19937& generator)>& mutate,
        const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
        const std::function<T(const std::vector<double>&, const std::vector<T>&, std::mt19937&)>& chooseParent,
        const std::function<T(const std::vector<T>&, const std::vector<T>&)>& select
    );

    // Constructor for population of size size will with genes generated by function initialize
    Population(
        int size,
        const std::function<T(std::mt19937&)>& initialize,
        u32 seed,
        const std::function<T(const T&, std::mt19937& generator)>& mutate,
        const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
        const std::function<T(const std::vector<double>&, const std::vector<T>&, std::mt19937&)>& chooseParent,
        const std::function<T(const std::vector<T>&, const std::vector<T>&)>& select
    );

    virtual void execute(bool useRecombination, bool useMutation) = 0; //executes one iteration of the evolutionary algorithm
    void execute_multiple(int generations, bool useRecombination, bool useMutation); //executes 'generations' iterations of the evolutionary algorithm
    std::vector<T> get_genes();
    std::string to_string();
};

// Class Implementation ---------------------------------------------------------------------------------------------------------------------

template<typename T>
Population<T>::Population(){};

template<typename T>
Population<T>::Population(
    const std::vector<T>& initial_genes,
    u32 seed,
    const std::function<T(const T&, std::mt19937&)>& mutate,
    const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
    const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937&)>& chooseParent,
    const std::function<T(const std::vector<T>&, const std::vector<T>&)>& select
) : size(initial_genes.size()), genes(initial_genes), generator(seed), mutate(mutate), recombine(recombine), chooseParent(chooseParent), select(select) {}

template<typename T>
Population<T>::Population(
    int size, 
    const std::function<T(std::mt19937&)>& initialize, 
    u32 seed,
    const std::function<T(const T&, std::mt19937&)>& mutate,
    const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
    const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937&)>& chooseParent,
    const std::function<T(const std::vector<T>&, const std::vector<T>&)>& select
) : size(size), genes(size), generator(seed), mutate(mutate), recombine(recombine), chooseParent(chooseParent), select(select) {
    for(int i = 0; i < size; i++){
        genes[i] = initialize(generator);
    }
}

template<typename T>
std::vector<T> Population<T>::get_genes(){
    return genes;
}

template<typename T>
void Population<T>::execute_multiple(int generations, bool useRecombination, bool useMutation){
    for(int i = 0; i < generations; i++){
        execute(useRecombination, useMutation);
    }
}

template<typename T>
std::string Population<T>::to_string(){
    std::string s;
    for (auto gene : genes) {
        s += std::to_string(gene) + "\n";
    }
    return s;
}