#include "population.hpp"

// Class Outline ----------------------------------------------------------------------------------------------------------------------------

template<typename T>
class Population_SO : public Population<T>{

private:

    const std::function<double(const T&)>& evaluate;
    const std::function<T(const T&, std::mt19937& generator)>& mutate;
    const std::function<T(const T&, const T&, std::mt19937&)>& recombine;
    const std::function<T(const std::vector<double>&, const std::vector<T>&, std::mt19937&)>& chooseParent;

    using Population<T>::genes;
    using Population<T>::size;
    using Population<T>::generator;

public:

    // Constructor for population initialized with passed genes initial_genes
    Population_SO(
        const std::vector<T>& initial_genes, 
        const std::function<double(const T&)>& evaluate,
        const std::function<T(const T&, std::mt19937&)>& mutate,
        const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
        const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937&)>& chooseParent,
        u32 seed
    );
    
    // Constructor for population of size size will with genes generated by function initialize
    Population_SO(
        int size,
        const std::function<T(std::mt19937&)>& initialize,
        const std::function<double(const T&)>& evaluate,
        const std::function<T(const T&, std::mt19937&)>& mutate,
        const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
        const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937&)>& chooseParent,
        u32 seed
    );

    void execute(bool useRecombination, bool useMutation); //executes one iteration of the evolutionary algorithm
    T getBest(); //returns the best individual of the current population
};

// Class Implementation ---------------------------------------------------------------------------------------------------------------------

template<typename T>
Population_SO<T>::Population_SO(
    const std::vector<T>& initial_genes, 
    const std::function<double(const T&)>& evaluate,
    const std::function<T(const T&, std::mt19937& generator)>& mutate,
    const std::function<T(const T&, const T&, std::mt19937& generator)>& recombine,
    const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937& generator)>& chooseParent,
    u32 seed
) : Population<T>(initial_genes, seed), evaluate(evaluate), mutate(mutate), recombine(recombine), chooseParent(chooseParent) {}

template<typename T>
Population_SO<T>::Population_SO(
    int size,
    const std::function<T(std::mt19937&)>& initialize,
    const std::function<double(const T&)>& evaluate,
    const std::function<T(const T&, std::mt19937&)>& mutate,
    const std::function<T(const T&, const T&, std::mt19937&)>& recombine,
    const std::function<T(const std::vector<double>&, const std::vector<T>& genes, std::mt19937&)>& chooseParent,
    u32 seed
) : Population<T>(size, initialize, seed), evaluate(evaluate), mutate(mutate), recombine(recombine), chooseParent(chooseParent) {}

template<typename T>
void Population_SO<T>::execute(bool useRecombination, bool useMutation) {
    std::vector<double> fitnessValues(size);
    for(int j = 0; j < size; j++){
        fitnessValues[j] = evaluate(genes[j]);
    }
    std::vector<T> new_genes = {};
    for(int j = 0; j < size; j++){
        T parent1 = chooseParent(fitnessValues, genes, generator);
        T child = parent1;
        if(useRecombination){
            T parent2 = chooseParent(fitnessValues, genes, generator);
            child = recombine(parent1, parent2, generator);
        }
        if(useMutation){
            child = mutate(child, generator);
        }
        new_genes.emplace_back(child);
    }
    genes = new_genes;
}

template<typename T>
T Population_SO<T>::getBest(){
    auto max_it = std::max_element(genes.begin(), genes.end(), [&](const auto& a, const auto& b) {
        return evaluate(a) < evaluate(b);
    });
    return *max_it;
}